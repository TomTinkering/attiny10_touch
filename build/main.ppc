# 1 "main.c"
# 1 "/home/tomv/workspace/attiny10_touch///"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "main.c"
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 1 3
# 42 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/inttypes.h" 1 3
# 37 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/inttypes.h" 3
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/include/stdint.h" 1 3 4


# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h" 1 3 4
# 121 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 142 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 159 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 213 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 273 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 4 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/include/stdint.h" 2 3 4
# 38 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/inttypes.h" 2 3
# 77 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 43 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 2 3
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 1 3
# 40 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 3
static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
# 80 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 3
void
_delay_loop_1(uint8_t __count)
{
 __asm__ volatile (
  "1: dec %0" "\n\t"
  "brne 1b"
  : "=r" (__count)
  : "0" (__count)
 );
}
# 102 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay_basic.h" 3
void
_delay_loop_2(uint16_t __count)
{
 __asm__ volatile (
  "1: sbiw %0,1" "\n\t"
  "brne 1b"
  : "=w" (__count)
  : "0" (__count)
 );
}
# 44 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 2 3
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 1 3
# 127 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern double cos(double __x) __attribute__((__const__));





extern double sin(double __x) __attribute__((__const__));





extern double tan(double __x) __attribute__((__const__));






extern double fabs(double __x) __attribute__((__const__));






extern double fmod(double __x, double __y) __attribute__((__const__));
# 168 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern double modf(double __x, double *__iptr);



extern float modff (float __x, float *__iptr);




extern double sqrt(double __x) __attribute__((__const__));





extern double cbrt(double __x) __attribute__((__const__));
# 194 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern double hypot (double __x, double __y) __attribute__((__const__));







extern double square(double __x) __attribute__((__const__));






extern double floor(double __x) __attribute__((__const__));






extern double ceil(double __x) __attribute__((__const__));
# 234 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern double frexp(double __x, int *__pexp);







extern double ldexp(double __x, int __exp) __attribute__((__const__));





extern double exp(double __x) __attribute__((__const__));





extern double cosh(double __x) __attribute__((__const__));





extern double sinh(double __x) __attribute__((__const__));





extern double tanh(double __x) __attribute__((__const__));







extern double acos(double __x) __attribute__((__const__));







extern double asin(double __x) __attribute__((__const__));






extern double atan(double __x) __attribute__((__const__));
# 298 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern double atan2(double __y, double __x) __attribute__((__const__));





extern double log(double __x) __attribute__((__const__));





extern double log10(double __x) __attribute__((__const__));





extern double pow(double __x, double __y) __attribute__((__const__));






extern int isnan(double __x) __attribute__((__const__));
# 333 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern int isinf(double __x) __attribute__((__const__));






__attribute__((__const__)) static inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
 "mov	%0, %C1		\n\t"
 "lsl	%0		\n\t"
 "mov	%0, %D1		\n\t"
 "rol	%0		"
 : "=r" (__exp)
 : "r" (__x) );
    return __exp != 0xff;
}






__attribute__((__const__)) static inline double copysign (double __x, double __y)
{
    __asm__ (
 "bst	%D2, 7	\n\t"
 "bld	%D0, 7	"
 : "=r" (__x)
 : "0" (__x), "r" (__y) );
    return __x;
}
# 376 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern int signbit (double __x) __attribute__((__const__));






extern double fdim (double __x, double __y) __attribute__((__const__));
# 392 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern double fma (double __x, double __y, double __z) __attribute__((__const__));







extern double fmax (double __x, double __y) __attribute__((__const__));







extern double fmin (double __x, double __y) __attribute__((__const__));






extern double trunc (double __x) __attribute__((__const__));
# 426 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern double round (double __x) __attribute__((__const__));
# 439 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern long lround (double __x) __attribute__((__const__));
# 453 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/math.h" 3
extern long lrint (double __x) __attribute__((__const__));
# 45 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 2 3
# 84 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
static inline void _delay_us(double __us) __attribute__((always_inline));
static inline void _delay_ms(double __ms) __attribute__((always_inline));
# 141 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
void
_delay_ms(double __ms)
{
 uint16_t __ticks;
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((8000000) / 1e3) * __ms;
# 161 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 186 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
}
# 223 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
void
_delay_us(double __us)
{
 uint8_t __ticks;
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((8000000) / 1e6) * __us;
# 243 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 261 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h" 3
}
# 2 "main.c" 2
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 1 3
# 99 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 3
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/sfr_defs.h" 1 3
# 100 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 2 3
# 404 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 3
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/iotn10.h" 1 3
# 405 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 2 3
# 600 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 3
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/portpins.h" 1 3
# 601 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 2 3

# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/common.h" 1 3
# 603 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 2 3

# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/version.h" 1 3
# 605 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 2 3


# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/fuse.h" 1 3
# 608 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 2 3


# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/lock.h" 1 3
# 611 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/io.h" 2 3
# 3 "main.c" 2
# 1 "/opt/cross/avr/bin/../lib/gcc/avr/4.6.2/../../../../avr/include/avr/interrupt.h" 1 3
# 4 "main.c" 2







void init(void);



typedef enum state_t {

    TAKEN_PASSED = 0,
    LED_EN = 1,
    SET_LED_DIRECT = 2,
    TOUCHED = 3,
    MEAS_DONE = 4,
    LED0 = 5,
    LED1 = 6,
    LED2 = 7

} state_t;

typedef enum msg_t {

    MSG_SLOT_TAKEN = 0,
    MSG_LED_EN = 1,
    MSG_LED_DIRECT = 2,
    MSG_IS_TOUCHED = 3,
    MSG_RESERVED = 4,
    MSG_LED0 = 5,
    MSG_LED1 = 6,
    MSG_LED2 = 7

} msg_t;
# 99 "main.c"
uint16_t cur_meas;
uint8_t cur_conf,cur_touch;
uint8_t cur_rx,cur_tx,tx_cnt;
uint8_t state;
uint8_t led_val;

uint8_t touch_cnt;
uint16_t touch_new;
uint16_t touch_avg;



int main(void) {

  init();





  while((1)){

      if( ((*(volatile uint16_t *)((0x28) + 0x00)) >= ((uint16_t)40000)) && !(state & (1 << MEAS_DONE))) {
          ((*(volatile uint8_t *)((0x01) + 0x00)) |= (1 << (1)));
          (state |= (1 << MEAS_DONE));
          __asm__ __volatile__ ("cli" ::: "memory");
          touch_new = (*(volatile uint16_t *)((0x22) + 0x00));
          __asm__ __volatile__ ("sei" ::: "memory");

          ((*(volatile uint8_t *)((0x2A) + 0x00)) |= (1 << 5));
          ((*(volatile uint8_t *)((0x2B) + 0x00)) |= (1 << 2));
          ((*(volatile uint8_t *)((0x01) + 0x00)) |= (1 << (1)));
      } else if ((*(volatile uint16_t *)((0x28) + 0x00)) < ((uint16_t)40000)){
          (state &= ~(1 << MEAS_DONE));
      }
# 171 "main.c"
  }


  return 0;
}


void init(void){

    __asm__ __volatile__ ("cli" ::: "memory");


    (*(volatile uint8_t *)((0x3C) + 0x00)) = (0xD8);
    (*(volatile uint8_t *)((0x36) + 0x00)) = 0x00;
    (*(volatile uint8_t *)((0x37) + 0x00)) = 0x00;


    (*(volatile uint8_t *)((0x02) + 0x00)) = (1 << (3)) | (1 << (0));
    (*(volatile uint8_t *)((0x01) + 0x00)) = (1 << (3)) | (1 << (1)) | (1 << (0));
    (*(volatile uint8_t *)((0x03) + 0x00)) = (1 << (2));
# 202 "main.c"
    (*(volatile uint8_t *)((0x2E) + 0x00)) = 0x00;
    (*(volatile uint8_t *)((0x2D) + 0x00)) = (1 << 7) | (1 << 6);

    (*(volatile uint8_t *)((0x2B) + 0x00)) = 0x00;
    (*(volatile uint16_t *)((0x28) + 0x00)) = 0x0000;


    touch_avg = (8000);

    cur_rx = ( 0x00 );
    cur_tx = 0x55;
    tx_cnt = 0x00;


    (*(volatile uint16_t *)((0x24) + 0x00)) = 0xF000;
    ((*(volatile uint8_t *)((0x2B) + 0x00)) |= (1 << 2));
    ((*(volatile uint8_t *)((0x2B) + 0x00)) |= (1 << 0));
    ((*(volatile uint8_t *)((0x2D) + 0x00)) |= (1 << 0));



    __asm__ __volatile__ ("sei" ::: "memory");

}
# 235 "main.c"
void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_1 (void){


    __asm__ __volatile__ ("sei" ::: "memory");


    (*(volatile uint16_t *)((0x24) + 0x00)) = (*(volatile uint16_t *)((0x28) + 0x00))+((uint16_t)(((uint16_t)(((uint32_t)8000000) / ((uint32_t)19200)))/2))-((uint16_t)(4+16));

    ((*(volatile uint8_t *)((0x14) + 0x00)) |= (1 << 0));
    ((*(volatile uint8_t *)((0x13) + 0x00)) &= ~(1 << 0));
    ((*(volatile uint8_t *)((0x2A) + 0x00)) |= (1 << 2));
    ((*(volatile uint8_t *)((0x2B) + 0x00)) |= (1 << 2));

}





void __vector_6 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_6 (void){


    __asm__ __volatile__ ("sei" ::: "memory");


    (*(volatile uint16_t *)((0x24) + 0x00)) += ((uint16_t)((uint16_t)(((uint32_t)8000000) / ((uint32_t)19200))));
    tx_cnt++;


    if(tx_cnt == (1)){

        ((*(volatile uint8_t *)((0x02) + 0x00)) &= ~(1 << (0)));
    } else if (tx_cnt < (10)-1) {

        if(((*(volatile uint8_t *)((0x00) + 0x00)) & (1 << (2)))){ (cur_rx |= (1 << 7)); } else { (cur_rx &= ~(1 << 7)); };
        cur_rx = (cur_rx >> 1);

        if((cur_tx & (1 << 0))){ ((*(volatile uint8_t *)((0x02) + 0x00)) |= (1 << (0))); } else { ((*(volatile uint8_t *)((0x02) + 0x00)) &= ~(1 << (0))); };
        cur_tx = (cur_tx >> 1);
    } else if (tx_cnt < (10)) {

        if(((*(volatile uint8_t *)((0x00) + 0x00)) & (1 << (2)))){ (cur_rx |= (1 << 7)); } else { (cur_rx &= ~(1 << 7)); };

        if((cur_tx & (1 << 0))){ ((*(volatile uint8_t *)((0x02) + 0x00)) |= (1 << (0))); } else { ((*(volatile uint8_t *)((0x02) + 0x00)) &= ~(1 << (0))); };
    } else {

        ((*(volatile uint8_t *)((0x02) + 0x00)) |= (1 << (0)));
        (*(volatile uint16_t *)((0x24) + 0x00)) += 10*((uint16_t)((uint16_t)(((uint32_t)8000000) / ((uint32_t)19200))));

        if( 0 ) {


            state = (cur_rx & ~((1 << MSG_SLOT_TAKEN) | (1 << MSG_RESERVED) | (1 << MSG_IS_TOUCHED))) | (state & ((1 << MSG_SLOT_TAKEN) | (1 << MSG_RESERVED) | (1 << MSG_IS_TOUCHED)));
            cur_tx = cur_rx | (1 << MSG_SLOT_TAKEN) | (state & (1 << TOUCHED));

            state &= ~(1 << TAKEN_PASSED) & ~(1 << TOUCHED);

            (*(volatile uint8_t *)((0x27) + 0x00)) = ~((1 << LED0) | (1 << LED1) | (1 << LED2)) | state;
            (*(volatile uint8_t *)((0x26) + 0x00)) = 0xFF;

        } else {

            cur_tx = (uint8_t)((touch_new >> 3) & 0x00FF);
        }


        cur_rx = 0x00;
        tx_cnt = 0x00;


        ((*(volatile uint8_t *)((0x2B) + 0x00)) &= ~(1 << 2));


    }

}
# 324 "main.c"
void __vector_4 (void) __attribute__ ((signal,used, externally_visible)) __attribute__((naked)); void __vector_4 (void){



    asm("cbi 2,3");
    asm("cbi 1,1");
    asm("reti");
}





void __vector_5 (void) __attribute__ ((signal,used, externally_visible)) __attribute__((naked)); void __vector_5 (void){


    asm("sbi 2,3");
    asm("reti");
}
